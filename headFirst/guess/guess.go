// guess - игра, в которой игрок должен угадать случайное число.

package main

import (
	"bufio"
	"fmt"
	"log"
	"math/rand"
	"os"
	"strconv"
	"strings"
)

func main() {
	// 1. Сгенерировать случайное число от 1 до 100 и сохранить его.
	// 2. Предложить игроку угадать задуманное число и сохранить его ответ
	// 3. Если предположение игрока меньше загаданного числа, вывести сообщение
	// (допустим, «Oops. Your guess was LOW»). Если оценка игрока больше загаданного числа,
	// вывести другое сообщение («Oops. Your guess was HIGH»).
	// 4. Разрешить игроку угадывать до 10 раз. Перед каждым предположением сообщить игроку,
	// сколько попыток у него осталось.
	// 5. Если предположение игрока равно загаданному числу, вывести сообщение об успехе и
	// перестать запрашивать предположения.
	// 6. Если у игрока кончились попытки, а число так и не было угадано, вывести сообщение:
	// «Sorry. You didn’t guess my number. It was: [загаданное число]».

	target := rand.Intn(100) + 1 // Вызываем функцию rand.Intn, которая генерирует целое число.
	// (100) + 1 : Прибавить 1, чтобы целое число лежало в диапазоне от 1 до 100.
	fmt.Println("I've chosen a random number between 1 and 100.")
	fmt.Println("Can you guess it?") // Сообщаем игроку о том, что число выбрано.
	//fmt.Println(target)

	// 2.
	reader := bufio.NewReader(os.Stdin) // Создаем bufio.Reader для чтения ввода с клавиатуры.

	// 6.
	success := false // Объявляем переменную «success» до цикла, чтобы она оставалась в области видимости после выхода из цикла.

	// 4.
	for guesses := 0; guesses < 10; guesses++ { // В переменной «guesses» хранится количество сделанных попыток.
		fmt.Println("You have", 10-guesses, "guesses left.") // Чтобы вычислить количество оставшихся попыток, значение guesses вычитается из 10.

		input, err := reader.ReadString('\n') // Прочитать данные, введенные поль-зователем до нажатия Enter.
		// Если произошла ошибка, программа выводит сообщение и завершается.
		if err != nil {
			log.Fatal(err)
		}
		input = strings.TrimSpace(input)  // Удаление символа новой строки.
		guess, err := strconv.Atoi(input) // Входная строка преоб-разуется в целое число.
		// Если произошла ошибка, программа выводит сообщение и завершается.
		if err != nil {
			log.Fatal(err)
		}

		// 3.
		if guess < target { // Если введенное значение меньше загаданного, сообщить об этом.
			fmt.Println("Oops. Your guess was LOW.")
		} else if guess > target { // Если введенное значение больше загаданного, сообщить об этом.
			fmt.Println("Oops. Your guess was HIGH.")
		} else { // В противном случае введенное значение должно быть правильным...
			// 6.
			success = true // Если игрок угадал правильно, значит, выводить сообщение о проигрыше не нужно.
			// 5
			fmt.Println("Good job! You guessed it!")
			break
		}

	}
	// 6.
	if !success { // Если переменная «success» равна false, сообщить игроку загаданное число.
		fmt.Println("Sorry, you didn't guess my number. It was:", target)
	}

}
